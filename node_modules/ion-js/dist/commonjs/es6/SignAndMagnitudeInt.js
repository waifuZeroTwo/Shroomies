"use strict";
/*!
 * Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsbi_1 = __importDefault(require("jsbi"));
const JsbiSupport_1 = require("./JsbiSupport");
class SignAndMagnitudeInt {
    constructor(_magnitude, _isNegative = JsbiSupport_1.JsbiSupport.isNegative(_magnitude)) {
        this._magnitude = _magnitude;
        this._isNegative = _isNegative;
    }
    get magnitude() {
        return this._magnitude;
    }
    get isNegative() {
        return this._isNegative;
    }
    static fromNumber(value) {
        const isNegative = value < 0 || Object.is(value, -0);
        const absoluteValue = Math.abs(value);
        const magnitude = jsbi_1.default.BigInt(absoluteValue);
        return new SignAndMagnitudeInt(magnitude, isNegative);
    }
    equals(other) {
        return (jsbi_1.default.equal(this._magnitude, other._magnitude) &&
            this._isNegative === other._isNegative);
    }
}
exports.default = SignAndMagnitudeInt;
//# sourceMappingURL=SignAndMagnitudeInt.js.map