"use strict";
/*!
 * Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSymbolTable = exports.ion_symbol_table_sid = exports.ion_symbol_table = void 0;
const IonImport_1 = require("./IonImport");
const IonLocalSymbolTable_1 = require("./IonLocalSymbolTable");
const IonSubstituteSymbolTable_1 = require("./IonSubstituteSymbolTable");
const IonSystemSymbolTable_1 = require("./IonSystemSymbolTable");
exports.ion_symbol_table = "$ion_symbol_table";
exports.ion_symbol_table_sid = 3;
const empty_struct = {};
function load_imports(reader, catalog) {
    let import_ = IonSystemSymbolTable_1.getSystemSymbolTableImport();
    reader.stepIn();
    while (reader.next()) {
        reader.stepIn();
        let name = null;
        let version = 1;
        let maxId = null;
        while (reader.next()) {
            switch (reader.fieldName()) {
                case "name":
                    name = reader.stringValue();
                    break;
                case "version":
                    version = reader.numberValue();
                    break;
                case "max_id":
                    maxId = reader.numberValue();
            }
        }
        if (version === null || version < 1) {
            version = 1;
        }
        if (name && name !== "$ion") {
            let symbolTable = catalog.getVersion(name, version);
            if (!symbolTable) {
                if (maxId === undefined) {
                    throw new Error(`No exact match found when trying to import symbol table ${name} version ${version}`);
                }
                else {
                    symbolTable = catalog.getTable(name);
                }
            }
            if (!symbolTable) {
                symbolTable = new IonSubstituteSymbolTable_1.SubstituteSymbolTable(maxId);
            }
            import_ = new IonImport_1.Import(import_, symbolTable, maxId);
        }
        reader.stepOut();
    }
    reader.stepOut();
    return import_;
}
function load_symbols(reader) {
    const symbols = [];
    reader.stepIn();
    while (reader.next()) {
        symbols.push(reader.stringValue());
    }
    reader.stepOut();
    return symbols;
}
function makeSymbolTable(catalog, reader) {
    let import_ = null;
    let symbols = [];
    let foundSymbols = false;
    let foundImports = false;
    reader.stepIn();
    while (reader.next()) {
        switch (reader.fieldName()) {
            case "imports":
                if (foundImports) {
                    throw new Error("Multiple import fields found.");
                }
                import_ = load_imports(reader, catalog);
                foundImports = true;
                break;
            case "symbols":
                if (foundSymbols) {
                    throw new Error("Multiple symbol fields found.");
                }
                symbols = load_symbols(reader);
                foundSymbols = true;
                break;
        }
    }
    reader.stepOut();
    return new IonLocalSymbolTable_1.LocalSymbolTable(import_, symbols);
}
exports.makeSymbolTable = makeSymbolTable;
//# sourceMappingURL=IonSymbols.js.map