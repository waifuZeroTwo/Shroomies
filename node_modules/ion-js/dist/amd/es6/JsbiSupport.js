/*!
 * Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "jsbi"], function (require, exports, jsbi_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsbiSupport = void 0;
    jsbi_1 = __importDefault(jsbi_1);
    class JsbiSupport {
        static isZero(value) {
            return jsbi_1.default.equal(value, JsbiSupport.ZERO);
        }
        static isNegative(value) {
            return jsbi_1.default.lessThan(value, JsbiSupport.ZERO);
        }
        static bigIntFromString(text) {
            let isNegative = false;
            let magnitudeText = text.trimLeft();
            if (text.startsWith("-")) {
                isNegative = true;
                magnitudeText = text.substring(1);
            }
            let bigInt = jsbi_1.default.BigInt(magnitudeText);
            if (isNegative) {
                bigInt = jsbi_1.default.unaryMinus(bigInt);
            }
            return bigInt;
        }
        static clampToSafeIntegerRange(value) {
            if (jsbi_1.default.greaterThan(value, this.NUMBER_MAX_SAFE_INTEGER)) {
                return Number.MAX_SAFE_INTEGER;
            }
            if (jsbi_1.default.lessThan(value, this.NUMBER_MIN_SAFE_INTEGER)) {
                return Number.MIN_SAFE_INTEGER;
            }
            return jsbi_1.default.toNumber(value);
        }
        static isSafeInteger(value) {
            return (jsbi_1.default.greaterThanOrEqual(value, this.NUMBER_MIN_SAFE_INTEGER) &&
                jsbi_1.default.lessThanOrEqual(value, this.NUMBER_MAX_SAFE_INTEGER));
        }
    }
    exports.JsbiSupport = JsbiSupport;
    JsbiSupport.ZERO = jsbi_1.default.BigInt(0);
    JsbiSupport.ONE = jsbi_1.default.BigInt(1);
    JsbiSupport.TWO = jsbi_1.default.BigInt(2);
    JsbiSupport.NUMBER_MAX_SAFE_INTEGER = jsbi_1.default.BigInt(Number.MAX_SAFE_INTEGER);
    JsbiSupport.NUMBER_MIN_SAFE_INTEGER = jsbi_1.default.BigInt(Number.MIN_SAFE_INTEGER);
});
//# sourceMappingURL=JsbiSupport.js.map