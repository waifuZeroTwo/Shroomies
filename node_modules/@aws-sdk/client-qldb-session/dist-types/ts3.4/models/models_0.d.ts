import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { QLDBSessionServiceException as __BaseException } from "./QLDBSessionServiceException";
export interface AbortTransactionRequest {}
export interface TimingInformation {
  ProcessingTimeMilliseconds?: number;
}
export interface AbortTransactionResult {
  TimingInformation?: TimingInformation;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message?: string;
  Code?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class CapacityExceededException extends __BaseException {
  readonly name: "CapacityExceededException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CapacityExceededException, __BaseException>
  );
}
export interface CommitTransactionRequest {
  TransactionId: string | undefined;
  CommitDigest: Uint8Array | undefined;
}
export interface IOUsage {
  ReadIOs?: number;
  WriteIOs?: number;
}
export interface CommitTransactionResult {
  TransactionId?: string;
  CommitDigest?: Uint8Array;
  TimingInformation?: TimingInformation;
  ConsumedIOs?: IOUsage;
}
export interface EndSessionRequest {}
export interface EndSessionResult {
  TimingInformation?: TimingInformation;
}
export interface ValueHolder {
  IonBinary?: Uint8Array;
  IonText?: string;
}
export interface ExecuteStatementRequest {
  TransactionId: string | undefined;
  Statement: string | undefined;
  Parameters?: ValueHolder[];
}
export interface Page {
  Values?: ValueHolder[];
  NextPageToken?: string;
}
export interface ExecuteStatementResult {
  FirstPage?: Page;
  TimingInformation?: TimingInformation;
  ConsumedIOs?: IOUsage;
}
export interface FetchPageRequest {
  TransactionId: string | undefined;
  NextPageToken: string | undefined;
}
export interface FetchPageResult {
  Page?: Page;
  TimingInformation?: TimingInformation;
  ConsumedIOs?: IOUsage;
}
export declare class InvalidSessionException extends __BaseException {
  readonly name: "InvalidSessionException";
  readonly $fault: "client";
  Message?: string;
  Code?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidSessionException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class OccConflictException extends __BaseException {
  readonly name: "OccConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<OccConflictException, __BaseException>
  );
}
export declare class RateExceededException extends __BaseException {
  readonly name: "RateExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<RateExceededException, __BaseException>
  );
}
export interface StartSessionRequest {
  LedgerName: string | undefined;
}
export interface StartTransactionRequest {}
export interface SendCommandRequest {
  SessionToken?: string;
  StartSession?: StartSessionRequest;
  StartTransaction?: StartTransactionRequest;
  EndSession?: EndSessionRequest;
  CommitTransaction?: CommitTransactionRequest;
  AbortTransaction?: AbortTransactionRequest;
  ExecuteStatement?: ExecuteStatementRequest;
  FetchPage?: FetchPageRequest;
}
export interface StartSessionResult {
  SessionToken?: string;
  TimingInformation?: TimingInformation;
}
export interface StartTransactionResult {
  TransactionId?: string;
  TimingInformation?: TimingInformation;
}
export interface SendCommandResult {
  StartSession?: StartSessionResult;
  StartTransaction?: StartTransactionResult;
  EndSession?: EndSessionResult;
  CommitTransaction?: CommitTransactionResult;
  AbortTransaction?: AbortTransactionResult;
  ExecuteStatement?: ExecuteStatementResult;
  FetchPage?: FetchPageResult;
}
