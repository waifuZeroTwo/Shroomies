"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_SendCommandCommand = exports.se_SendCommandCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const models_0_1 = require("../models/models_0");
const QLDBSessionServiceException_1 = require("../models/QLDBSessionServiceException");
const se_SendCommandCommand = async (input, context) => {
    const headers = sharedHeaders("SendCommand");
    let body;
    body = JSON.stringify(se_SendCommandRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SendCommandCommand = se_SendCommandCommand;
const de_SendCommandCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SendCommandCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SendCommandResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SendCommandCommand = de_SendCommandCommand;
const de_SendCommandCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.qldbsession#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "CapacityExceededException":
        case "com.amazonaws.qldbsession#CapacityExceededException":
            throw await de_CapacityExceededExceptionRes(parsedOutput, context);
        case "InvalidSessionException":
        case "com.amazonaws.qldbsession#InvalidSessionException":
            throw await de_InvalidSessionExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.qldbsession#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "OccConflictException":
        case "com.amazonaws.qldbsession#OccConflictException":
            throw await de_OccConflictExceptionRes(parsedOutput, context);
        case "RateExceededException":
        case "com.amazonaws.qldbsession#RateExceededException":
            throw await de_RateExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_CapacityExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.CapacityExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidSessionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidSessionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OccConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OccConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RateExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RateExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_CommitTransactionRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CommitDigest: context.base64Encoder,
        TransactionId: [],
    });
};
const se_ExecuteStatementRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Parameters: (_) => se_StatementParameters(_, context),
        Statement: [],
        TransactionId: [],
    });
};
const se_SendCommandRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AbortTransaction: smithy_client_1._json,
        CommitTransaction: (_) => se_CommitTransactionRequest(_, context),
        EndSession: smithy_client_1._json,
        ExecuteStatement: (_) => se_ExecuteStatementRequest(_, context),
        FetchPage: smithy_client_1._json,
        SessionToken: [],
        StartSession: smithy_client_1._json,
        StartTransaction: smithy_client_1._json,
    });
};
const se_StatementParameters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ValueHolder(entry, context);
    });
};
const se_ValueHolder = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        IonBinary: context.base64Encoder,
        IonText: [],
    });
};
const de_CommitTransactionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CommitDigest: context.base64Decoder,
        ConsumedIOs: smithy_client_1._json,
        TimingInformation: smithy_client_1._json,
        TransactionId: smithy_client_1.expectString,
    });
};
const de_ExecuteStatementResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConsumedIOs: smithy_client_1._json,
        FirstPage: (_) => de_Page(_, context),
        TimingInformation: smithy_client_1._json,
    });
};
const de_FetchPageResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConsumedIOs: smithy_client_1._json,
        Page: (_) => de_Page(_, context),
        TimingInformation: smithy_client_1._json,
    });
};
const de_Page = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextPageToken: smithy_client_1.expectString,
        Values: (_) => de_ValueHolders(_, context),
    });
};
const de_SendCommandResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AbortTransaction: smithy_client_1._json,
        CommitTransaction: (_) => de_CommitTransactionResult(_, context),
        EndSession: smithy_client_1._json,
        ExecuteStatement: (_) => de_ExecuteStatementResult(_, context),
        FetchPage: (_) => de_FetchPageResult(_, context),
        StartSession: smithy_client_1._json,
        StartTransaction: smithy_client_1._json,
    });
};
const de_ValueHolder = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        IonBinary: context.base64Decoder,
        IonText: smithy_client_1.expectString,
    });
};
const de_ValueHolders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValueHolder(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(QLDBSessionServiceException_1.QLDBSessionServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `QLDBSession.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
