"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateExceededException = exports.OccConflictException = exports.LimitExceededException = exports.InvalidSessionException = exports.CapacityExceededException = exports.BadRequestException = void 0;
const QLDBSessionServiceException_1 = require("./QLDBSessionServiceException");
class BadRequestException extends QLDBSessionServiceException_1.QLDBSessionServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.BadRequestException = BadRequestException;
class CapacityExceededException extends QLDBSessionServiceException_1.QLDBSessionServiceException {
    constructor(opts) {
        super({
            name: "CapacityExceededException",
            $fault: "server",
            ...opts,
        });
        this.name = "CapacityExceededException";
        this.$fault = "server";
        Object.setPrototypeOf(this, CapacityExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.CapacityExceededException = CapacityExceededException;
class InvalidSessionException extends QLDBSessionServiceException_1.QLDBSessionServiceException {
    constructor(opts) {
        super({
            name: "InvalidSessionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSessionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSessionException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidSessionException = InvalidSessionException;
class LimitExceededException extends QLDBSessionServiceException_1.QLDBSessionServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
class OccConflictException extends QLDBSessionServiceException_1.QLDBSessionServiceException {
    constructor(opts) {
        super({
            name: "OccConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "OccConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OccConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.OccConflictException = OccConflictException;
class RateExceededException extends QLDBSessionServiceException_1.QLDBSessionServiceException {
    constructor(opts) {
        super({
            name: "RateExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "RateExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RateExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.RateExceededException = RateExceededException;
