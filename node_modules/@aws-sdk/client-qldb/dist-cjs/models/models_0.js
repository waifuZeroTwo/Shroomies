"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRevisionResponseFilterSensitiveLog = exports.GetRevisionRequestFilterSensitiveLog = exports.GetDigestResponseFilterSensitiveLog = exports.GetBlockResponseFilterSensitiveLog = exports.GetBlockRequestFilterSensitiveLog = exports.ValueHolderFilterSensitiveLog = exports.EncryptionStatus = exports.ExportStatus = exports.S3ObjectEncryptionType = exports.OutputFormat = exports.StreamStatus = exports.ErrorCause = exports.ResourceInUseException = exports.ResourceAlreadyExistsException = exports.LimitExceededException = exports.LedgerState = exports.PermissionsMode = exports.ResourcePreconditionNotMetException = exports.ResourceNotFoundException = exports.InvalidParameterException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const QLDBServiceException_1 = require("./QLDBServiceException");
class InvalidParameterException extends QLDBServiceException_1.QLDBServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.ParameterName = opts.ParameterName;
    }
}
exports.InvalidParameterException = InvalidParameterException;
class ResourceNotFoundException extends QLDBServiceException_1.QLDBServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.ResourceName = opts.ResourceName;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ResourcePreconditionNotMetException extends QLDBServiceException_1.QLDBServiceException {
    constructor(opts) {
        super({
            name: "ResourcePreconditionNotMetException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourcePreconditionNotMetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePreconditionNotMetException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.ResourceName = opts.ResourceName;
    }
}
exports.ResourcePreconditionNotMetException = ResourcePreconditionNotMetException;
exports.PermissionsMode = {
    ALLOW_ALL: "ALLOW_ALL",
    STANDARD: "STANDARD",
};
exports.LedgerState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
};
class LimitExceededException extends QLDBServiceException_1.QLDBServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
    }
}
exports.LimitExceededException = LimitExceededException;
class ResourceAlreadyExistsException extends QLDBServiceException_1.QLDBServiceException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.ResourceName = opts.ResourceName;
    }
}
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
class ResourceInUseException extends QLDBServiceException_1.QLDBServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.ResourceName = opts.ResourceName;
    }
}
exports.ResourceInUseException = ResourceInUseException;
exports.ErrorCause = {
    IAM_PERMISSION_REVOKED: "IAM_PERMISSION_REVOKED",
    KINESIS_STREAM_NOT_FOUND: "KINESIS_STREAM_NOT_FOUND",
};
exports.StreamStatus = {
    ACTIVE: "ACTIVE",
    CANCELED: "CANCELED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IMPAIRED: "IMPAIRED",
};
exports.OutputFormat = {
    ION_BINARY: "ION_BINARY",
    ION_TEXT: "ION_TEXT",
    JSON: "JSON",
};
exports.S3ObjectEncryptionType = {
    NO_ENCRYPTION: "NO_ENCRYPTION",
    SSE_KMS: "SSE_KMS",
    SSE_S3: "SSE_S3",
};
exports.ExportStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    IN_PROGRESS: "IN_PROGRESS",
};
exports.EncryptionStatus = {
    ENABLED: "ENABLED",
    KMS_KEY_INACCESSIBLE: "KMS_KEY_INACCESSIBLE",
    UPDATING: "UPDATING",
};
const ValueHolderFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IonText && { IonText: smithy_client_1.SENSITIVE_STRING }),
});
exports.ValueHolderFilterSensitiveLog = ValueHolderFilterSensitiveLog;
const GetBlockRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BlockAddress && { BlockAddress: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.DigestTipAddress && { DigestTipAddress: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetBlockRequestFilterSensitiveLog = GetBlockRequestFilterSensitiveLog;
const GetBlockResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Block && { Block: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Proof && { Proof: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetBlockResponseFilterSensitiveLog = GetBlockResponseFilterSensitiveLog;
const GetDigestResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DigestTipAddress && { DigestTipAddress: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetDigestResponseFilterSensitiveLog = GetDigestResponseFilterSensitiveLog;
const GetRevisionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BlockAddress && { BlockAddress: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.DigestTipAddress && { DigestTipAddress: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetRevisionRequestFilterSensitiveLog = GetRevisionRequestFilterSensitiveLog;
const GetRevisionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Proof && { Proof: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.Revision && { Revision: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetRevisionResponseFilterSensitiveLog = GetRevisionResponseFilterSensitiveLog;
