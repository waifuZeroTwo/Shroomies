import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { QLDBServiceException as __BaseException } from "./QLDBServiceException";
export interface CancelJournalKinesisStreamRequest {
  LedgerName: string | undefined;
  StreamId: string | undefined;
}
export interface CancelJournalKinesisStreamResponse {
  StreamId?: string;
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  Message?: string;
  ParameterName?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ResourcePreconditionNotMetException extends __BaseException {
  readonly name: "ResourcePreconditionNotMetException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<
      ResourcePreconditionNotMetException,
      __BaseException
    >
  );
}
export declare const PermissionsMode: {
  readonly ALLOW_ALL: "ALLOW_ALL";
  readonly STANDARD: "STANDARD";
};
export type PermissionsMode =
  (typeof PermissionsMode)[keyof typeof PermissionsMode];
export interface CreateLedgerRequest {
  Name: string | undefined;
  Tags?: Record<string, string>;
  PermissionsMode: PermissionsMode | undefined;
  DeletionProtection?: boolean;
  KmsKey?: string;
}
export declare const LedgerState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
};
export type LedgerState = (typeof LedgerState)[keyof typeof LedgerState];
export interface CreateLedgerResponse {
  Name?: string;
  Arn?: string;
  State?: LedgerState;
  CreationDateTime?: Date;
  PermissionsMode?: PermissionsMode;
  DeletionProtection?: boolean;
  KmsKeyArn?: string;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  ResourceType?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export interface DeleteLedgerRequest {
  Name: string | undefined;
}
export interface DescribeJournalKinesisStreamRequest {
  LedgerName: string | undefined;
  StreamId: string | undefined;
}
export declare const ErrorCause: {
  readonly IAM_PERMISSION_REVOKED: "IAM_PERMISSION_REVOKED";
  readonly KINESIS_STREAM_NOT_FOUND: "KINESIS_STREAM_NOT_FOUND";
};
export type ErrorCause = (typeof ErrorCause)[keyof typeof ErrorCause];
export interface KinesisConfiguration {
  StreamArn: string | undefined;
  AggregationEnabled?: boolean;
}
export declare const StreamStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CANCELED: "CANCELED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IMPAIRED: "IMPAIRED";
};
export type StreamStatus = (typeof StreamStatus)[keyof typeof StreamStatus];
export interface JournalKinesisStreamDescription {
  LedgerName: string | undefined;
  CreationTime?: Date;
  InclusiveStartTime?: Date;
  ExclusiveEndTime?: Date;
  RoleArn: string | undefined;
  StreamId: string | undefined;
  Arn?: string;
  Status: StreamStatus | undefined;
  KinesisConfiguration: KinesisConfiguration | undefined;
  ErrorCause?: ErrorCause;
  StreamName: string | undefined;
}
export interface DescribeJournalKinesisStreamResponse {
  Stream?: JournalKinesisStreamDescription;
}
export interface DescribeJournalS3ExportRequest {
  Name: string | undefined;
  ExportId: string | undefined;
}
export declare const OutputFormat: {
  readonly ION_BINARY: "ION_BINARY";
  readonly ION_TEXT: "ION_TEXT";
  readonly JSON: "JSON";
};
export type OutputFormat = (typeof OutputFormat)[keyof typeof OutputFormat];
export declare const S3ObjectEncryptionType: {
  readonly NO_ENCRYPTION: "NO_ENCRYPTION";
  readonly SSE_KMS: "SSE_KMS";
  readonly SSE_S3: "SSE_S3";
};
export type S3ObjectEncryptionType =
  (typeof S3ObjectEncryptionType)[keyof typeof S3ObjectEncryptionType];
export interface S3EncryptionConfiguration {
  ObjectEncryptionType: S3ObjectEncryptionType | undefined;
  KmsKeyArn?: string;
}
export interface S3ExportConfiguration {
  Bucket: string | undefined;
  Prefix: string | undefined;
  EncryptionConfiguration: S3EncryptionConfiguration | undefined;
}
export declare const ExportStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly IN_PROGRESS: "IN_PROGRESS";
};
export type ExportStatus = (typeof ExportStatus)[keyof typeof ExportStatus];
export interface JournalS3ExportDescription {
  LedgerName: string | undefined;
  ExportId: string | undefined;
  ExportCreationTime: Date | undefined;
  Status: ExportStatus | undefined;
  InclusiveStartTime: Date | undefined;
  ExclusiveEndTime: Date | undefined;
  S3ExportConfiguration: S3ExportConfiguration | undefined;
  RoleArn: string | undefined;
  OutputFormat?: OutputFormat;
}
export interface DescribeJournalS3ExportResponse {
  ExportDescription: JournalS3ExportDescription | undefined;
}
export interface DescribeLedgerRequest {
  Name: string | undefined;
}
export declare const EncryptionStatus: {
  readonly ENABLED: "ENABLED";
  readonly KMS_KEY_INACCESSIBLE: "KMS_KEY_INACCESSIBLE";
  readonly UPDATING: "UPDATING";
};
export type EncryptionStatus =
  (typeof EncryptionStatus)[keyof typeof EncryptionStatus];
export interface LedgerEncryptionDescription {
  KmsKeyArn: string | undefined;
  EncryptionStatus: EncryptionStatus | undefined;
  InaccessibleKmsKeyDateTime?: Date;
}
export interface DescribeLedgerResponse {
  Name?: string;
  Arn?: string;
  State?: LedgerState;
  CreationDateTime?: Date;
  PermissionsMode?: PermissionsMode;
  DeletionProtection?: boolean;
  EncryptionDescription?: LedgerEncryptionDescription;
}
export interface ExportJournalToS3Request {
  Name: string | undefined;
  InclusiveStartTime: Date | undefined;
  ExclusiveEndTime: Date | undefined;
  S3ExportConfiguration: S3ExportConfiguration | undefined;
  RoleArn: string | undefined;
  OutputFormat?: OutputFormat;
}
export interface ExportJournalToS3Response {
  ExportId: string | undefined;
}
export interface ValueHolder {
  IonText?: string;
}
export interface GetBlockRequest {
  Name: string | undefined;
  BlockAddress: ValueHolder | undefined;
  DigestTipAddress?: ValueHolder;
}
export interface GetBlockResponse {
  Block: ValueHolder | undefined;
  Proof?: ValueHolder;
}
export interface GetDigestRequest {
  Name: string | undefined;
}
export interface GetDigestResponse {
  Digest: Uint8Array | undefined;
  DigestTipAddress: ValueHolder | undefined;
}
export interface GetRevisionRequest {
  Name: string | undefined;
  BlockAddress: ValueHolder | undefined;
  DocumentId: string | undefined;
  DigestTipAddress?: ValueHolder;
}
export interface GetRevisionResponse {
  Proof?: ValueHolder;
  Revision: ValueHolder | undefined;
}
export interface ListJournalKinesisStreamsForLedgerRequest {
  LedgerName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListJournalKinesisStreamsForLedgerResponse {
  Streams?: JournalKinesisStreamDescription[];
  NextToken?: string;
}
export interface ListJournalS3ExportsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListJournalS3ExportsResponse {
  JournalS3Exports?: JournalS3ExportDescription[];
  NextToken?: string;
}
export interface ListJournalS3ExportsForLedgerRequest {
  Name: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListJournalS3ExportsForLedgerResponse {
  JournalS3Exports?: JournalS3ExportDescription[];
  NextToken?: string;
}
export interface ListLedgersRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface LedgerSummary {
  Name?: string;
  State?: LedgerState;
  CreationDateTime?: Date;
}
export interface ListLedgersResponse {
  Ledgers?: LedgerSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface StreamJournalToKinesisRequest {
  LedgerName: string | undefined;
  RoleArn: string | undefined;
  Tags?: Record<string, string>;
  InclusiveStartTime: Date | undefined;
  ExclusiveEndTime?: Date;
  KinesisConfiguration: KinesisConfiguration | undefined;
  StreamName: string | undefined;
}
export interface StreamJournalToKinesisResponse {
  StreamId?: string;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateLedgerRequest {
  Name: string | undefined;
  DeletionProtection?: boolean;
  KmsKey?: string;
}
export interface UpdateLedgerResponse {
  Name?: string;
  Arn?: string;
  State?: LedgerState;
  CreationDateTime?: Date;
  DeletionProtection?: boolean;
  EncryptionDescription?: LedgerEncryptionDescription;
}
export interface UpdateLedgerPermissionsModeRequest {
  Name: string | undefined;
  PermissionsMode: PermissionsMode | undefined;
}
export interface UpdateLedgerPermissionsModeResponse {
  Name?: string;
  Arn?: string;
  PermissionsMode?: PermissionsMode;
}
export declare const ValueHolderFilterSensitiveLog: (obj: ValueHolder) => any;
export declare const GetBlockRequestFilterSensitiveLog: (
  obj: GetBlockRequest
) => any;
export declare const GetBlockResponseFilterSensitiveLog: (
  obj: GetBlockResponse
) => any;
export declare const GetDigestResponseFilterSensitiveLog: (
  obj: GetDigestResponse
) => any;
export declare const GetRevisionRequestFilterSensitiveLog: (
  obj: GetRevisionRequest
) => any;
export declare const GetRevisionResponseFilterSensitiveLog: (
  obj: GetRevisionResponse
) => any;
