import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { ListJournalS3ExportsRequest, ListJournalS3ExportsResponse } from "../models/models_0";
import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../QLDBClient";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListJournalS3ExportsCommand}.
 */
export interface ListJournalS3ExportsCommandInput extends ListJournalS3ExportsRequest {
}
/**
 * @public
 *
 * The output of {@link ListJournalS3ExportsCommand}.
 */
export interface ListJournalS3ExportsCommandOutput extends ListJournalS3ExportsResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Returns all journal export jobs for all ledgers that are associated with the current
 *          Amazon Web Services account and Region.</p>
 *          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
 *          you can retrieve all the items by calling <code>ListJournalS3Exports</code> multiple
 *          times.</p>
 *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
 *          Guide</i>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { QLDBClient, ListJournalS3ExportsCommand } from "@aws-sdk/client-qldb"; // ES Modules import
 * // const { QLDBClient, ListJournalS3ExportsCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
 * const client = new QLDBClient(config);
 * const input = { // ListJournalS3ExportsRequest
 *   MaxResults: Number("int"),
 *   NextToken: "STRING_VALUE",
 * };
 * const command = new ListJournalS3ExportsCommand(input);
 * const response = await client.send(command);
 * // { // ListJournalS3ExportsResponse
 * //   JournalS3Exports: [ // JournalS3ExportList
 * //     { // JournalS3ExportDescription
 * //       LedgerName: "STRING_VALUE", // required
 * //       ExportId: "STRING_VALUE", // required
 * //       ExportCreationTime: new Date("TIMESTAMP"), // required
 * //       Status: "IN_PROGRESS" || "COMPLETED" || "CANCELLED", // required
 * //       InclusiveStartTime: new Date("TIMESTAMP"), // required
 * //       ExclusiveEndTime: new Date("TIMESTAMP"), // required
 * //       S3ExportConfiguration: { // S3ExportConfiguration
 * //         Bucket: "STRING_VALUE", // required
 * //         Prefix: "STRING_VALUE", // required
 * //         EncryptionConfiguration: { // S3EncryptionConfiguration
 * //           ObjectEncryptionType: "SSE_KMS" || "SSE_S3" || "NO_ENCRYPTION", // required
 * //           KmsKeyArn: "STRING_VALUE",
 * //         },
 * //       },
 * //       RoleArn: "STRING_VALUE", // required
 * //       OutputFormat: "ION_BINARY" || "ION_TEXT" || "JSON",
 * //     },
 * //   ],
 * //   NextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListJournalS3ExportsCommandInput - {@link ListJournalS3ExportsCommandInput}
 * @returns {@link ListJournalS3ExportsCommandOutput}
 * @see {@link ListJournalS3ExportsCommandInput} for command's `input` shape.
 * @see {@link ListJournalS3ExportsCommandOutput} for command's `response` shape.
 * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
 *
 * @throws {@link QLDBServiceException}
 * <p>Base exception class for all service exceptions from QLDB service.</p>
 *
 */
export declare class ListJournalS3ExportsCommand extends $Command<ListJournalS3ExportsCommandInput, ListJournalS3ExportsCommandOutput, QLDBClientResolvedConfig> {
    readonly input: ListJournalS3ExportsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: ListJournalS3ExportsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJournalS3ExportsCommandInput, ListJournalS3ExportsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
