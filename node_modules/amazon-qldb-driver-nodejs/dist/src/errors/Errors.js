"use strict";
/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRetryableException = exports.isBadRequestException = exports.isResourcePreconditionNotMetException = exports.isResourceNotFoundException = exports.isOccConflictException = exports.isTransactionExpiredException = exports.isInvalidSessionException = exports.isInvalidParameterException = exports.ExecuteError = exports.SessionPoolEmptyError = exports.LambdaAbortedError = exports.DriverClosedError = exports.ClientError = void 0;
const client_qldb_1 = require("@aws-sdk/client-qldb");
const client_qldb_session_1 = require("@aws-sdk/client-qldb-session");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const LogUtil_1 = require("../LogUtil");
const transactionExpiredPattern = RegExp("Transaction .* has expired");
class ClientError extends Error {
    /**
     * @internal
     */
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, ClientError.prototype);
        this.message = message;
        this.name = "ClientError";
        (0, LogUtil_1.error)(message);
    }
}
exports.ClientError = ClientError;
class DriverClosedError extends Error {
    /**
     * @internal
     */
    constructor() {
        const message = "Cannot invoke methods on a closed driver. Please create a new driver and retry.";
        super(message);
        Object.setPrototypeOf(this, DriverClosedError.prototype);
        this.message = message;
        this.name = "DriverClosedError";
        (0, LogUtil_1.error)(message);
    }
}
exports.DriverClosedError = DriverClosedError;
class LambdaAbortedError extends Error {
    /**
     * @internal
     */
    constructor() {
        const message = "Abort called. Halting execution of lambda function.";
        super(message);
        Object.setPrototypeOf(this, LambdaAbortedError.prototype);
        this.message = message;
        this.name = "LambdaAbortedError";
        (0, LogUtil_1.error)(message);
    }
}
exports.LambdaAbortedError = LambdaAbortedError;
class SessionPoolEmptyError extends Error {
    /**
     * @internal
     */
    constructor() {
        const message = "Session pool is empty. Please close existing sessions first before retrying.";
        super(message);
        Object.setPrototypeOf(this, SessionPoolEmptyError.prototype);
        this.message = message;
        this.name = "SessionPoolEmptyError";
        (0, LogUtil_1.error)(message);
    }
}
exports.SessionPoolEmptyError = SessionPoolEmptyError;
/**
 * @internal
 */
class ExecuteError extends Error {
    constructor(cause, isRetryable, isInvalidSessionException, transactionId = null) {
        const message = "Error containing the context of a failure during Execute.";
        super(message);
        Object.setPrototypeOf(this, ExecuteError.prototype);
        this.cause = cause;
        this.isRetryable = isRetryable;
        this.isInvalidSessionException = isInvalidSessionException;
        this.transactionId = transactionId;
    }
}
exports.ExecuteError = ExecuteError;
/**
 * Is the exception an InvalidParameterException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidParameterException. False otherwise.
 */
function isInvalidParameterException(e) {
    return e instanceof client_qldb_1.InvalidParameterException;
}
exports.isInvalidParameterException = isInvalidParameterException;
/**
 * Is the exception an InvalidSessionException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidSessionException. False otherwise.
 */
function isInvalidSessionException(e) {
    return e instanceof client_qldb_session_1.InvalidSessionException;
}
exports.isInvalidSessionException = isInvalidSessionException;
/**
 * Is the exception because the transaction expired? The transaction expiry is a message wrapped
 * inside InvalidSessionException.
 * @param e The client error to check to see if it is an InvalidSessionException due to transaction expiry.
 * @returns Whether or not the exception is is an InvalidSessionException due to transaction expiry.
 */
function isTransactionExpiredException(e) {
    return e instanceof client_qldb_session_1.InvalidSessionException && transactionExpiredPattern.test(e.message);
}
exports.isTransactionExpiredException = isTransactionExpiredException;
/**
 * Is the exception an OccConflictException?
 * @param e The client error caught.
 * @returns True if the exception is an OccConflictException. False otherwise.
 */
function isOccConflictException(e) {
    return e instanceof client_qldb_session_1.OccConflictException;
}
exports.isOccConflictException = isOccConflictException;
/**
 * Is the exception a ResourceNotFoundException?
 * @param e The client error to check to see if it is a ResourceNotFoundException.
 * @returns Whether or not the exception is a ResourceNotFoundException.
 */
function isResourceNotFoundException(e) {
    return e instanceof client_qldb_1.ResourceNotFoundException;
}
exports.isResourceNotFoundException = isResourceNotFoundException;
/**
 * Is the exception a ResourcePreconditionNotMetException?
 * @param e The client error to check to see if it is a ResourcePreconditionNotMetException.
 * @returns Whether or not the exception is a ResourcePreconditionNotMetException.
 */
function isResourcePreconditionNotMetException(e) {
    return e instanceof client_qldb_1.ResourcePreconditionNotMetException;
}
exports.isResourcePreconditionNotMetException = isResourcePreconditionNotMetException;
/**
 * Is the exception a BadRequestException?
 * @param e The client error to check to see if it is a BadRequestException.
 * @returns Whether or not the exception is a BadRequestException.
 */
function isBadRequestException(e) {
    return e instanceof client_qldb_session_1.BadRequestException;
}
exports.isBadRequestException = isBadRequestException;
/**
 * Is the exception a retryable exception given the state of the session's transaction?
 * @param e The client error caught.
 * @param onCommit If the error caught was on a commit command.
 * @returns True if the exception is a retryable exception. False otherwise.
 *
 * @internal
 */
function isRetryableException(e, onCommit) {
    if (e instanceof smithy_client_1.ServiceException || e instanceof client_qldb_session_1.QLDBSessionServiceException) {
        const canSdkRetry = onCommit ? false : e.$retryable && e.$retryable.throttling;
        return isRetryableStatusCode(e) || isOccConflictException(e) || canSdkRetry ||
            (isInvalidSessionException(e) && !isTransactionExpiredException(e));
    }
    return false;
}
exports.isRetryableException = isRetryableException;
/**
 * Does the error have a retryable code or status code?
 * @param e The client error caught.
 * @returns True if the exception has a retryable code.
 */
function isRetryableStatusCode(e) {
    if (e instanceof smithy_client_1.ServiceException || e instanceof client_qldb_session_1.QLDBSessionServiceException) {
        return (e.$metadata.httpStatusCode === 500) ||
            (e.$metadata.httpStatusCode === 503) ||
            (e.name === "NoHttpResponseException") ||
            (e.name === "SocketTimeoutException");
    }
    return false;
}
