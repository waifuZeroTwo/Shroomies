"use strict";
/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionExecutor = void 0;
const Errors_1 = require("./errors/Errors");
/**
 * A class to handle lambda execution.
 */
class TransactionExecutor {
    /**
     * Creates a TransactionExecutor.
     * @param transaction The transaction that this executor is running within.
     *
     * @internal
     */
    constructor(transaction) {
        this._transaction = transaction;
    }
    /**
     * Abort the transaction and roll back any changes.
     * @throws {@linkcode LambdaAbortedError} when called.
     */
    abort() {
        throw new Errors_1.LambdaAbortedError();
    }
    /**
     * Execute the specified statement in the current transaction. This method returns a promise
     * which eventually returns all the results loaded into memory.
     *
     * The PartiQL statement executed via this transaction is not immediately committed.
     * The entire transaction will be committed once the all the code in `transactionFunction`
     * (passed as an argument to {@link QldbDriver.executeLambda}) completes.
     *
     * @param statement The statement to execute.
     * @param parameters Variable number of arguments, where each argument corresponds to a
     *                  placeholder (?) in the PartiQL query.
     *                  The argument could be any native JavaScript type or an Ion DOM type.
     *                  [Details of Ion DOM type and JavaScript type](https://github.com/amzn/ion-js/blob/master/src/dom/README.md#iondom-data-types)
     * @returns Promise which fulfills with all results loaded into memory
     * @throws [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) when the passed argument value cannot be converted into Ion
     */
    execute(statement, ...parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._transaction.execute(statement, ...parameters);
        });
    }
    /**
     * Execute the specified statement in the current transaction. This method returns a promise
     * which fulfills with Readable interface, which allows you to stream one record at time
     *
     * The PartiQL statement executed via this transaction is not immediately committed.
     * The entire transaction will be committed once the all the code in `transactionFunction`
     * (passed as an argument to {@link QldbDriver.executeLambda}) completes.
     *
     * @param statement The statement to execute.
     * @param parameters Variable number of arguments, where each argument corresponds to a
     *                  placeholder (?) in the PartiQL query.
     *                  The argument could be any native JavaScript type or an Ion DOM type.
     *                  [Details of Ion DOM type and JavaScript type](https://github.com/amzn/ion-js/blob/master/src/dom/README.md#iondom-data-types)
     * @returns Promise which fulfills with a Readable Stream
     * @throws {@linkcode TransactionClosedError} when the transaction is closed.
     * @throws [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) when the passed argument value cannot be converted into Ion
     */
    executeAndStreamResults(statement, ...parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._transaction.executeAndStreamResults(statement, ...parameters);
        });
    }
    /**
    * Get the transaction ID.
    * @returns The transaction ID.
    */
    getTransactionId() {
        return this._transaction.getTransactionId();
    }
}
exports.TransactionExecutor = TransactionExecutor;
