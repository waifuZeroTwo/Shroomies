import { BackoffFunction } from "./BackoffFunction";
export declare class RetryConfig {
    private _retryLimit;
    private _backoffFunction;
    /**
    * Retry and Backoff config for Qldb Driver.

    * @param retryLimit When there is a failure while executing the transaction like OCC or any other retryable failure, the driver will try running your transaction block again.
    *                   This parameter tells the driver how many times to retry when there are failures. The value must be greater than 0. The default value is 4.
    *                   See {@link https://docs.aws.amazon.com/qldb/latest/developerguide/driver.best-practices.html#driver.best-practices.configuring} for more details.
    *
    * @param backoffFunction A custom function that accepts a retry count, error, transaction id and returns the amount
    *                        of time to delay in milliseconds. If the result is a non-zero negative value the backoff will
    *                        be considered to be zero. If no backoff function is provided then {@linkcode defaultBackoffFunction} will be used.
    *
    * @throws RangeError if `retryLimit` is less than 0.
    */
    constructor(retryLimit?: number, backoffFunction?: BackoffFunction);
    getRetryLimit(): number;
    getBackoffFunction(): BackoffFunction;
}
