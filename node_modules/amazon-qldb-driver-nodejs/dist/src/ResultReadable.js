"use strict";
/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultReadable = void 0;
const ion_js_1 = require("ion-js");
const stream_1 = require("stream");
const Result_1 = require("./Result");
const IOUsage_1 = require("./stats/IOUsage");
const TimingInformation_1 = require("./stats/TimingInformation");
/**
 * A class representing the result of a statement returned from QLDB as a stream.
 * Extends Readable from the Node.JS Stream API interface.
 * The stream will always operate in object mode.
 */
class ResultReadable extends stream_1.Readable {
    /**
     * Create a ResultReadable.
     * @param txnId The ID of the transaction the statement was executed in.
     * @param executeResult The returned result from the statement execution.
     * @param communicator The Communicator used for the statement execution.
     *
     * @internal
     */
    constructor(txnId, executeResult, communicator) {
        super({ objectMode: true });
        this._communicator = communicator;
        this._cachedPage = executeResult.FirstPage;
        this._txnId = txnId;
        this._shouldPushCachedPage = true;
        this._retrieveIndex = 0;
        this._isPushingData = false;
        this._readIOs = executeResult.ConsumedIOs == null ? null : executeResult.ConsumedIOs.ReadIOs;
        this._processingTime =
            executeResult.TimingInformation == null ? null : executeResult.TimingInformation.ProcessingTimeMilliseconds;
    }
    /**
     * Returns the number of read IO request for the executed statement. The statistics are stateful.
     * @returns IOUsage, containing number of read IOs.
     */
    getConsumedIOs() {
        return this._readIOs == null
            ? null
            : new IOUsage_1.IOUsage(this._readIOs);
    }
    /**
     * Returns server-side processing time for the executed statement. The statistics are stateful.
     * @returns TimingInformation, containing processing time.
     */
    getTimingInformation() {
        return this._processingTime == null
            ? null
            : new TimingInformation_1.TimingInformation(this._processingTime);
    }
    /**
     * Implementation of the `readable.read` method for the Node Streams Readable Interface.
     * @param size The number of bytes to read asynchronously. This is currently not being used as only object mode is
     * supported.
     *
     * @internal
     */
    _read(size) {
        if (this._isPushingData) {
            return;
        }
        this._isPushingData = true;
        this._pushPageValues();
    }
    /**
     * Pushes the values for the Node Streams Readable Interface. This method fetches the next page if is required and
     * handles converting the values returned from QLDB into an Ion value.
     * @returns Promise which fulfills with void.
     */
    _pushPageValues() {
        return __awaiter(this, void 0, void 0, function* () {
            let canPush = true;
            try {
                if (this._shouldPushCachedPage) {
                    this._shouldPushCachedPage = false;
                }
                else if (this._cachedPage.NextPageToken) {
                    try {
                        const fetchPageResult = yield this._communicator.fetchPage(this._txnId, this._cachedPage.NextPageToken);
                        this._cachedPage = fetchPageResult.Page;
                        if (fetchPageResult.ConsumedIOs != null) {
                            this._readIOs += fetchPageResult.ConsumedIOs.ReadIOs;
                        }
                        if (fetchPageResult.TimingInformation != null) {
                            this._processingTime += fetchPageResult.TimingInformation.ProcessingTimeMilliseconds;
                        }
                        this._retrieveIndex = 0;
                    }
                    catch (e) {
                        this.destroy(e);
                        canPush = false;
                        return;
                    }
                }
                while (this._retrieveIndex < this._cachedPage.Values.length) {
                    const ionValue = ion_js_1.dom.load(Result_1.Result._handleBlob(this._cachedPage.Values[this._retrieveIndex++].IonBinary));
                    canPush = this.push(ionValue);
                    if (!canPush) {
                        this._shouldPushCachedPage = this._retrieveIndex < this._cachedPage.Values.length;
                        return;
                    }
                }
                if (!this._cachedPage.NextPageToken) {
                    this.push(null);
                    canPush = false;
                }
            }
            finally {
                this._isPushingData = false;
                if (canPush) {
                    this._read();
                }
            }
        });
    }
}
exports.ResultReadable = ResultReadable;
